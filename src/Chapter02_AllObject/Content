1.寄存器  最快的存储区，位于处理器内部，数量极其有限，根据需求分配，不能直接控制，在程序中感觉不到寄存器的任何迹象
2.堆栈  位于通用RAM（随机访问存储器）中，通过堆栈指针可以直接从处理器中获取直接支持，堆栈指针向下移动，则分配新的内存，
    向上移动，则释放那些内存，创建程序时，必须知道堆栈内所有项的确切声明周期，以便上下移动堆栈指针，对象的引用存于堆栈中。
3.堆   一种通用的内存池（位于RAM中），用于存放所有的Java对象，堆不同于堆栈的好处，编译器不需要知道存储的数据在堆里存活多长时间。
4.常量存储   常量值通常存储在程序代码内部，这样做时安全的，因为他们永远不会被改变。（嵌入式系统中，常量本身会和其他部分隔离开来，
    这种情况，可以有选择的放在ROM（只读存储器--所有字面常量字符串和具有字符串值的常量表达式都自动是内存限定的，并且会置于特殊的静态存储区中）中）
5.非RAM存储   数据完全存活于程序之外

基本数据类型
boolean    1 byte       Boolean
byte       1 byte       Byte
char       2 byte       Character
short      2 byte       Short
int        4 byte       Integer
float      4 byte       Float
double     8 byte       Double
long       8 byte       Long
void                    Void


高精度数据
BigInteger   支持任意精度的整数，可以精确的表示任何大小的整数值
BigDecimal   支持任何精度的定点数，例如精确的货币计算

作用域
作用域决定了其内定义的变量名的可见性和声明周期
在作用域里定义的变量只可作用于作用域结束之前

对象的作用域
Java对象不具备和基本类型一样的生命周期

public static void main(String[] args){}
args并未用到，但是Java编译必须这么做，因为args要用来存储命令行参数。

